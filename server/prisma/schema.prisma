datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt     DateTime       @default(now())
  firstName     String?
  id            String         @id @default(cuid())
  lastName      String?
  password      String
  roles         Json
  trainingPlans TrainingPlan[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
}

model TrainingPlan {
  createdAt      DateTime   @default(now())
  exercise       Exercise[]
  goal           Goal[]
  id             String     @id @default(cuid())
  name           String
  targetBodyPart String?
  updatedAt      DateTime   @updatedAt
  user           User?      @relation(fields: [userId], references: [id])
  userId         String?
  workouts       Workout[]
}

model Exercise {
  createdAt       DateTime       @default(now())
  description     String?
  difficulty      Difficulty?    @relation(fields: [difficultyId], references: [id])
  difficultyId    String?
  equipmentNeeded String
  exerciseLogs    ExerciseLog[]
  goals           Goal[]
  id              String         @id @default(cuid())
  imageLink       String
  name            String         @unique
  targetbodyPart  String?
  trainingPlans   TrainingPlan[]
  updatedAt       DateTime       @updatedAt
  videoLink       String
}

model Workout {
  createdAt      DateTime      @default(now())
  date           DateTime?
  exerciseLog    ExerciseLog?  @relation(name: "ExerciseLogOnWorkouts", fields: [exerciseLogId], references: [id])
  exerciseLogId  String?
  exerciseLogs   ExerciseLog[] @relation(name: "ExerciseLogsOnWorkout")
  id             String        @id @default(cuid())
  trainingPlan   TrainingPlan? @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId String?
  updatedAt      DateTime      @updatedAt
}

model ExerciseLog {
  createdAt  DateTime  @default(now())
  exercise   Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId String?   @unique
  id         String    @id @default(cuid())
  reps       Int?
  sets       Float?
  updatedAt  DateTime  @updatedAt
  weight     Float?
  workout    Workout?  @relation(name: "ExerciseLogsOnWorkout", fields: [workoutId], references: [id])
  workoutId  String?   @unique
  workouts   Workout[] @relation(name: "ExerciseLogOnWorkouts")
}

model Goal {
  createdAt     DateTime       @default(now())
  currentReps   Int?
  currentWeight Float?
  deadline      DateTime?
  exercise      Exercise?      @relation(fields: [exerciseId], references: [id])
  exerciseId    String?        @unique
  id            String         @id @default(cuid())
  motivation    String?
  targetReps    Int?
  targetWeight  Float?
  trainingPlans TrainingPlan[]
  updatedAt     DateTime       @updatedAt
}

model Difficulty {
  advanced     String?
  beginner     String?
  createdAt    DateTime   @default(now())
  elite        String?
  exercises    Exercise[]
  expert       String?
  id           String     @id @default(cuid())
  intermediate String?
  updatedAt    DateTime   @updatedAt
}
