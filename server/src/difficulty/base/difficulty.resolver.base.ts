/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDifficultyArgs } from "./CreateDifficultyArgs";
import { UpdateDifficultyArgs } from "./UpdateDifficultyArgs";
import { DeleteDifficultyArgs } from "./DeleteDifficultyArgs";
import { DifficultyFindManyArgs } from "./DifficultyFindManyArgs";
import { DifficultyFindUniqueArgs } from "./DifficultyFindUniqueArgs";
import { Difficulty } from "./Difficulty";
import { ExerciseFindManyArgs } from "../../exercise/base/ExerciseFindManyArgs";
import { Exercise } from "../../exercise/base/Exercise";
import { DifficultyService } from "../difficulty.service";

@graphql.Resolver(() => Difficulty)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DifficultyResolverBase {
  constructor(
    protected readonly service: DifficultyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "read",
    possession: "any",
  })
  async _difficultiesMeta(
    @graphql.Args() args: DifficultyFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Difficulty])
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "read",
    possession: "any",
  })
  async difficulties(
    @graphql.Args() args: DifficultyFindManyArgs
  ): Promise<Difficulty[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Difficulty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "read",
    possession: "own",
  })
  async difficulty(
    @graphql.Args() args: DifficultyFindUniqueArgs
  ): Promise<Difficulty | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Difficulty)
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "create",
    possession: "any",
  })
  async createDifficulty(
    @graphql.Args() args: CreateDifficultyArgs
  ): Promise<Difficulty> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Difficulty)
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "update",
    possession: "any",
  })
  async updateDifficulty(
    @graphql.Args() args: UpdateDifficultyArgs
  ): Promise<Difficulty | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Difficulty)
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "delete",
    possession: "any",
  })
  async deleteDifficulty(
    @graphql.Args() args: DeleteDifficultyArgs
  ): Promise<Difficulty | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Exercise])
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async exercises(
    @graphql.Parent() parent: Difficulty,
    @graphql.Args() args: ExerciseFindManyArgs
  ): Promise<Exercise[]> {
    const results = await this.service.findExercises(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
