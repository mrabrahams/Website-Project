/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExerciseService } from "../exercise.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ExerciseCreateInput } from "./ExerciseCreateInput";
import { ExerciseWhereInput } from "./ExerciseWhereInput";
import { ExerciseWhereUniqueInput } from "./ExerciseWhereUniqueInput";
import { ExerciseFindManyArgs } from "./ExerciseFindManyArgs";
import { ExerciseUpdateInput } from "./ExerciseUpdateInput";
import { Exercise } from "./Exercise";
import { ExerciseLogFindManyArgs } from "../../exerciseLog/base/ExerciseLogFindManyArgs";
import { ExerciseLog } from "../../exerciseLog/base/ExerciseLog";
import { ExerciseLogWhereUniqueInput } from "../../exerciseLog/base/ExerciseLogWhereUniqueInput";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { GoalWhereUniqueInput } from "../../goal/base/GoalWhereUniqueInput";
import { TrainingPlanFindManyArgs } from "../../trainingPlan/base/TrainingPlanFindManyArgs";
import { TrainingPlan } from "../../trainingPlan/base/TrainingPlan";
import { TrainingPlanWhereUniqueInput } from "../../trainingPlan/base/TrainingPlanWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ExerciseControllerBase {
  constructor(
    protected readonly service: ExerciseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Exercise })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: ExerciseCreateInput): Promise<Exercise> {
    return await this.service.create({
      data: {
        ...data,

        difficulty: data.difficulty
          ? {
              connect: data.difficulty,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,

        difficulty: {
          select: {
            id: true,
          },
        },

        equipmentNeeded: true,
        id: true,
        imageLink: true,
        name: true,
        targetbodyPart: true,
        updatedAt: true,
        videoLink: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Exercise] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ExerciseFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Exercise[]> {
    const args = plainToClass(ExerciseFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        description: true,

        difficulty: {
          select: {
            id: true,
          },
        },

        equipmentNeeded: true,
        id: true,
        imageLink: true,
        name: true,
        targetbodyPart: true,
        updatedAt: true,
        videoLink: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<Exercise | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        description: true,

        difficulty: {
          select: {
            id: true,
          },
        },

        equipmentNeeded: true,
        id: true,
        imageLink: true,
        name: true,
        targetbodyPart: true,
        updatedAt: true,
        videoLink: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() data: ExerciseUpdateInput
  ): Promise<Exercise | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          difficulty: data.difficulty
            ? {
                connect: data.difficulty,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,

          difficulty: {
            select: {
              id: true,
            },
          },

          equipmentNeeded: true,
          id: true,
          imageLink: true,
          name: true,
          targetbodyPart: true,
          updatedAt: true,
          videoLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Exercise })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<Exercise | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          description: true,

          difficulty: {
            select: {
              id: true,
            },
          },

          equipmentNeeded: true,
          id: true,
          imageLink: true,
          name: true,
          targetbodyPart: true,
          updatedAt: true,
          videoLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/exerciseLogs")
  @ApiNestedQuery(ExerciseLogFindManyArgs)
  async findManyExerciseLogs(
    @common.Req() request: Request,
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<ExerciseLog[]> {
    const query = plainToClass(ExerciseLogFindManyArgs, request.query);
    const results = await this.service.findExerciseLogs(params.id, {
      ...query,
      select: {
        createdAt: true,

        exercise: {
          select: {
            id: true,
          },
        },

        id: true,
        reps: true,
        sets: true,
        updatedAt: true,
        weight: true,

        workout: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/exerciseLogs")
  async connectExerciseLogs(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: ExerciseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseLogs: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/exerciseLogs")
  async updateExerciseLogs(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: ExerciseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseLogs: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/exerciseLogs")
  async disconnectExerciseLogs(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: ExerciseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      exerciseLogs: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/goals")
  @ApiNestedQuery(GoalFindManyArgs)
  async findManyGoals(
    @common.Req() request: Request,
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<Goal[]> {
    const query = plainToClass(GoalFindManyArgs, request.query);
    const results = await this.service.findGoals(params.id, {
      ...query,
      select: {
        createdAt: true,
        currentReps: true,
        currentWeight: true,
        deadline: true,

        exercise: {
          select: {
            id: true,
          },
        },

        id: true,
        motivation: true,
        targetReps: true,
        targetWeight: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/goals")
  async connectGoals(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goals: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/goals")
  async updateGoals(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goals: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/goals")
  async disconnectGoals(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: GoalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      goals: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/trainingPlans")
  @ApiNestedQuery(TrainingPlanFindManyArgs)
  async findManyTrainingPlans(
    @common.Req() request: Request,
    @common.Param() params: ExerciseWhereUniqueInput
  ): Promise<TrainingPlan[]> {
    const query = plainToClass(TrainingPlanFindManyArgs, request.query);
    const results = await this.service.findTrainingPlans(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        targetBodyPart: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/trainingPlans")
  async connectTrainingPlans(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: TrainingPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingPlans: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/trainingPlans")
  async updateTrainingPlans(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: TrainingPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingPlans: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/trainingPlans")
  async disconnectTrainingPlans(
    @common.Param() params: ExerciseWhereUniqueInput,
    @common.Body() body: TrainingPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      trainingPlans: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
