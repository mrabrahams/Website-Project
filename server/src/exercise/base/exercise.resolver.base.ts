/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExerciseArgs } from "./CreateExerciseArgs";
import { UpdateExerciseArgs } from "./UpdateExerciseArgs";
import { DeleteExerciseArgs } from "./DeleteExerciseArgs";
import { ExerciseFindManyArgs } from "./ExerciseFindManyArgs";
import { ExerciseFindUniqueArgs } from "./ExerciseFindUniqueArgs";
import { Exercise } from "./Exercise";
import { ExerciseLogFindManyArgs } from "../../exerciseLog/base/ExerciseLogFindManyArgs";
import { ExerciseLog } from "../../exerciseLog/base/ExerciseLog";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { TrainingPlanFindManyArgs } from "../../trainingPlan/base/TrainingPlanFindManyArgs";
import { TrainingPlan } from "../../trainingPlan/base/TrainingPlan";
import { Difficulty } from "../../difficulty/base/Difficulty";
import { ExerciseService } from "../exercise.service";

@graphql.Resolver(() => Exercise)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ExerciseResolverBase {
  constructor(
    protected readonly service: ExerciseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async _exercisesMeta(
    @graphql.Args() args: ExerciseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Exercise])
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async exercises(
    @graphql.Args() args: ExerciseFindManyArgs
  ): Promise<Exercise[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Exercise, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "own",
  })
  async exercise(
    @graphql.Args() args: ExerciseFindUniqueArgs
  ): Promise<Exercise | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exercise)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "create",
    possession: "any",
  })
  async createExercise(
    @graphql.Args() args: CreateExerciseArgs
  ): Promise<Exercise> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        difficulty: args.data.difficulty
          ? {
              connect: args.data.difficulty,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Exercise)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "update",
    possession: "any",
  })
  async updateExercise(
    @graphql.Args() args: UpdateExerciseArgs
  ): Promise<Exercise | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          difficulty: args.data.difficulty
            ? {
                connect: args.data.difficulty,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Exercise)
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "delete",
    possession: "any",
  })
  async deleteExercise(
    @graphql.Args() args: DeleteExerciseArgs
  ): Promise<Exercise | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ExerciseLog])
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "read",
    possession: "any",
  })
  async exerciseLogs(
    @graphql.Parent() parent: Exercise,
    @graphql.Args() args: ExerciseLogFindManyArgs
  ): Promise<ExerciseLog[]> {
    const results = await this.service.findExerciseLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Goal])
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  async goals(
    @graphql.Parent() parent: Exercise,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TrainingPlan])
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "read",
    possession: "any",
  })
  async trainingPlans(
    @graphql.Parent() parent: Exercise,
    @graphql.Args() args: TrainingPlanFindManyArgs
  ): Promise<TrainingPlan[]> {
    const results = await this.service.findTrainingPlans(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Difficulty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Difficulty",
    action: "read",
    possession: "any",
  })
  async difficulty(
    @graphql.Parent() parent: Exercise
  ): Promise<Difficulty | null> {
    const result = await this.service.getDifficulty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
