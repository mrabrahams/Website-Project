/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExerciseLogArgs } from "./CreateExerciseLogArgs";
import { UpdateExerciseLogArgs } from "./UpdateExerciseLogArgs";
import { DeleteExerciseLogArgs } from "./DeleteExerciseLogArgs";
import { ExerciseLogFindManyArgs } from "./ExerciseLogFindManyArgs";
import { ExerciseLogFindUniqueArgs } from "./ExerciseLogFindUniqueArgs";
import { ExerciseLog } from "./ExerciseLog";
import { WorkoutFindManyArgs } from "../../workout/base/WorkoutFindManyArgs";
import { Workout } from "../../workout/base/Workout";
import { Exercise } from "../../exercise/base/Exercise";
import { ExerciseLogService } from "../exerciseLog.service";

@graphql.Resolver(() => ExerciseLog)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ExerciseLogResolverBase {
  constructor(
    protected readonly service: ExerciseLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "read",
    possession: "any",
  })
  async _exerciseLogsMeta(
    @graphql.Args() args: ExerciseLogFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExerciseLog])
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "read",
    possession: "any",
  })
  async exerciseLogs(
    @graphql.Args() args: ExerciseLogFindManyArgs
  ): Promise<ExerciseLog[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExerciseLog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "read",
    possession: "own",
  })
  async exerciseLog(
    @graphql.Args() args: ExerciseLogFindUniqueArgs
  ): Promise<ExerciseLog | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseLog)
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "create",
    possession: "any",
  })
  async createExerciseLog(
    @graphql.Args() args: CreateExerciseLogArgs
  ): Promise<ExerciseLog> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        exercise: args.data.exercise
          ? {
              connect: args.data.exercise,
            }
          : undefined,

        workout: args.data.workout
          ? {
              connect: args.data.workout,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExerciseLog)
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "update",
    possession: "any",
  })
  async updateExerciseLog(
    @graphql.Args() args: UpdateExerciseLogArgs
  ): Promise<ExerciseLog | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          exercise: args.data.exercise
            ? {
                connect: args.data.exercise,
              }
            : undefined,

          workout: args.data.workout
            ? {
                connect: args.data.workout,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExerciseLog)
  @nestAccessControl.UseRoles({
    resource: "ExerciseLog",
    action: "delete",
    possession: "any",
  })
  async deleteExerciseLog(
    @graphql.Args() args: DeleteExerciseLogArgs
  ): Promise<ExerciseLog | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Workout])
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async workouts(
    @graphql.Parent() parent: ExerciseLog,
    @graphql.Args() args: WorkoutFindManyArgs
  ): Promise<Workout[]> {
    const results = await this.service.findWorkouts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Exercise, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async exercise(
    @graphql.Parent() parent: ExerciseLog
  ): Promise<Exercise | null> {
    const result = await this.service.getExercise(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workout, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async workout(
    @graphql.Parent() parent: ExerciseLog
  ): Promise<Workout | null> {
    const result = await this.service.getWorkout(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
