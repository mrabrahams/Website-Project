/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTrainingPlanArgs } from "./CreateTrainingPlanArgs";
import { UpdateTrainingPlanArgs } from "./UpdateTrainingPlanArgs";
import { DeleteTrainingPlanArgs } from "./DeleteTrainingPlanArgs";
import { TrainingPlanFindManyArgs } from "./TrainingPlanFindManyArgs";
import { TrainingPlanFindUniqueArgs } from "./TrainingPlanFindUniqueArgs";
import { TrainingPlan } from "./TrainingPlan";
import { ExerciseFindManyArgs } from "../../exercise/base/ExerciseFindManyArgs";
import { Exercise } from "../../exercise/base/Exercise";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { WorkoutFindManyArgs } from "../../workout/base/WorkoutFindManyArgs";
import { Workout } from "../../workout/base/Workout";
import { User } from "../../user/base/User";
import { TrainingPlanService } from "../trainingPlan.service";

@graphql.Resolver(() => TrainingPlan)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TrainingPlanResolverBase {
  constructor(
    protected readonly service: TrainingPlanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "read",
    possession: "any",
  })
  async _trainingPlansMeta(
    @graphql.Args() args: TrainingPlanFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TrainingPlan])
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "read",
    possession: "any",
  })
  async trainingPlans(
    @graphql.Args() args: TrainingPlanFindManyArgs
  ): Promise<TrainingPlan[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TrainingPlan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "read",
    possession: "own",
  })
  async trainingPlan(
    @graphql.Args() args: TrainingPlanFindUniqueArgs
  ): Promise<TrainingPlan | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrainingPlan)
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "create",
    possession: "any",
  })
  async createTrainingPlan(
    @graphql.Args() args: CreateTrainingPlanArgs
  ): Promise<TrainingPlan> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrainingPlan)
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "update",
    possession: "any",
  })
  async updateTrainingPlan(
    @graphql.Args() args: UpdateTrainingPlanArgs
  ): Promise<TrainingPlan | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrainingPlan)
  @nestAccessControl.UseRoles({
    resource: "TrainingPlan",
    action: "delete",
    possession: "any",
  })
  async deleteTrainingPlan(
    @graphql.Args() args: DeleteTrainingPlanArgs
  ): Promise<TrainingPlan | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Exercise])
  @nestAccessControl.UseRoles({
    resource: "Exercise",
    action: "read",
    possession: "any",
  })
  async exercise(
    @graphql.Parent() parent: TrainingPlan,
    @graphql.Args() args: ExerciseFindManyArgs
  ): Promise<Exercise[]> {
    const results = await this.service.findExercise(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Goal])
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  async goal(
    @graphql.Parent() parent: TrainingPlan,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoal(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Workout])
  @nestAccessControl.UseRoles({
    resource: "Workout",
    action: "read",
    possession: "any",
  })
  async workouts(
    @graphql.Parent() parent: TrainingPlan,
    @graphql.Args() args: WorkoutFindManyArgs
  ): Promise<Workout[]> {
    const results = await this.service.findWorkouts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: TrainingPlan): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
